/*
  ==============================================================================

    HistogramBrightness.cpp
    Created: 22 Apr 2016 11:38:15am
    Author:  falindrith

  ==============================================================================
*/

#include "HistogramBrightness.h"

HistogramBrightness::HistogramBrightness(string name, int numBins) :
  _numBins(numBins), HistogramAttribute(name)
{
  _autoLockParams.insert(HUE);
  _autoLockParams.insert(SAT);
  _autoLockParams.insert(VALUE);
  _autoLockParams.insert(POLAR);
  _autoLockParams.insert(AZIMUTH);
  _autoLockParams.insert(SOFT);
}

  HistogramBrightness::HistogramBrightness(string name, int numBins, int w, int h) :
  _numBins(numBins), HistogramAttribute(name, w, h)
{
  _autoLockParams.insert(HUE);
  _autoLockParams.insert(SAT);
  _autoLockParams.insert(VALUE);
  _autoLockParams.insert(POLAR);
  _autoLockParams.insert(AZIMUTH);
  _autoLockParams.insert(SOFT);
}

HistogramBrightness::~HistogramBrightness()
{
}

double HistogramBrightness::evaluateScene(Snapshot * s, Image& img)
{
  if (img.getWidth() != _canonicalWidth || img.getHeight() != _canonicalHeight) {
    // in the event that the image was actually generated by an attribute with a different
    // size (which would be a bit weird) regenerate it here.
    img = generateImage(s);
  }

  Histogram1D brightness = getGrayscaleHist(img, _numBins);

  // return average brightness penalized slightly by how many max brightness pixels we have
  return (brightness.avg() - brightness.percentGreaterThan(99)) * 100;
}
