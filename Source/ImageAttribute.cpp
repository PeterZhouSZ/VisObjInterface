/*
  ==============================================================================

    ImageAttribute.cpp
    Created: 1 Aug 2016 5:24:38pm
    Author:  eshimizu

  ==============================================================================
*/

#include "ImageAttribute.h"

ImageDrawer::ImageDrawer(Image i) : _img(i) {
}

ImageDrawer::~ImageDrawer()
{
}

void ImageDrawer::resized()
{
}

void ImageDrawer::paint(Graphics & g)
{
  g.drawImageWithin(_img, 0, 0, getWidth(), getHeight(), RectanglePlacement::centred);
}

ImageAttribute::ImageAttribute(string name, string filepath, float weight) : HistogramAttribute(name),
  _fullSource(5, {}), _LSource(1, {}), _abSource(2, {}), _LabSource(3, {}), _weight(weight)
{
  File img(filepath);
  FileInputStream in(img);

  if (in.openedOk()) {
    // load image
    PNGImageFormat pngReader;
    _originalImg = pngReader.decodeImage(in);
    _sourceImg = _originalImg.rescaled(_canonicalWidth, _canonicalHeight);

    getRecorder()->log(SYSTEM, "Loaded image for attribute " + name);
  }
  else {
    getRecorder()->log(SYSTEM, "Failed to load image for attribute " + name);
  }

  initUI();
}

ImageAttribute::ImageAttribute(string name, Image img, float weight) : HistogramAttribute(name),
  _fullSource(5, {}), _LSource(1, {}), _abSource(2, {}), _LabSource(3, {}), _weight(weight)
{
  _originalImg = img;
  _sourceImg = img.rescaled(_canonicalWidth, _canonicalHeight);

  initUI();
}

ImageAttribute::ImageAttribute(string name, Snapshot * s, float weight) : HistogramAttribute(name),
  _fullSource(5, {}), _LSource(1, {}), _abSource(2, {}), _LabSource(3, {}), _weight(weight)
{
  _originalImg = generateImage(s, getGlobalSettings()->_renderWidth, getGlobalSettings()->_renderHeight);
  _sourceImg = _originalImg.rescaled(_canonicalWidth, _canonicalHeight);

  initUI();
}

ImageAttribute::ImageAttribute(ImageAttribute & other) : HistogramAttribute(other._name.toStdString()),
  _fullSource(other._fullSource), _LSource(other._LSource), _abSource(other._abSource), _LabSource(other._LabSource)
{
  _originalImg = other._originalImg;
  _sourceImg = other._sourceImg;
  _metric = other._metric;
  _weight = other._weight;
}

ImageAttribute::~ImageAttribute()
{
}

void ImageAttribute::setStyle(Style style)
{
  switch (style)
  {
  case SIDE_LIGHT:
    _styleFunction = std::bind(&sideLightStyle, std::placeholders::_1, std::placeholders::_2);
    break;
  case DIRECTIONAL:
    _styleFunction = std::bind(&directionalLightStyle, std::placeholders::_1, std::placeholders::_2);
    break;
  case FLAT:
    _styleFunction = std::bind(&flatLightStyle, std::placeholders::_1, std::placeholders::_2);
    break;
  default:
    break;
  }
}

void ImageAttribute::initUI()
{
  _showImgButton.setButtonText("Show Image");
  _showImgButton.setName("Show Image");
  _showImgButton.addListener(this);
  addAndMakeVisible(_showImgButton);

  _mode = FULL;
  StringArray modes;
  modes.add("All Properties");
  modes.add("Brightness");
  modes.add("Hue");
  modes.add("Brightness and Hue");

  _modeSelect.addListener(this);
  _modeSelect.addItemList(modes, 1);
  _modeSelect.setSelectedId(FULL + 1, dontSendNotification);
  addAndMakeVisible(_modeSelect);
}

double ImageAttribute::evaluateScene(Snapshot * s, Image& img)
{
  if (s->getRigData().size() == 0)
    return 0;

  if (img.getWidth() != _canonicalWidth || img.getHeight() != _canonicalHeight) {
    // in the event that the image was actually generated by an attribute with a different
    // size (which would be a bit weird) regenerate it here.
    img = generateImage(s);
  }

  double score = 0;

  switch (_mode) {
  case(FULL): {
#ifdef SPARSE5D
    SparseHistogram currentHist = getLabxyHist(img, _weight);
    double diff = currentHist.EMD(_fullSource);
#endif
#ifdef LABXYHIST
    LabxyHistogram currentHist = getLabxyHist2(img, _n, _n, _n, 3, 3);
    double diff = currentHist.EMD(_fullSource, _metric);
#endif
    score = (100 - diff);
    break;
  }
  case (L): {
    SparseHistogram currentHist = getLHist(img);
    double diff = currentHist.EMD(_LSource);
    score = (100 - diff);
    break;
  }
  case (AB): {
    SparseHistogram currentHist = getabHist(img);
    double diff = currentHist.EMD(_abSource);
    score = (100 - diff);
    break;
  }
  case(LAB): {
    SparseHistogram currentHist = getLabHist(img);
    double diff = currentHist.EMD(_LabSource);
    score = (100 - diff);
    break;
  }
  default:
    return 0;
  }

  if (_styleFunction) {
    score += _styleFunction(s, img);
  }

  return score;
}

void ImageAttribute::preProcess()
{
#ifdef SPARSE5D
  _fullSource = getLabxyHist(_sourceImg, _weight);
#endif
#ifdef LABXYHIST
  _fullSource = getLabxyHist2(_sourceImg, _n, _n, _n, 3, 3);
#endif

  _LSource = getLHist(_sourceImg);
  _abSource = getabHist(_sourceImg);
  _LabSource = getLabHist(_sourceImg);

  // _metric = getGlobalSettings()->_metric;
}

void ImageAttribute::resized()
{
  HistogramAttribute::resized();

  auto lbounds = getLocalBounds();
  auto top = lbounds.removeFromTop(24);

  top.removeFromRight(80);
  _showImgButton.setBounds(top.removeFromRight(80).reduced(2));
  _modeSelect.setBounds(top.removeFromRight(100).reduced(2));
}

void ImageAttribute::buttonClicked(Button * b)
{
  HistogramAttribute::buttonClicked(b);

  if (b->getName() == "Show Image") {
    Viewport* vp = new Viewport();
    ImageDrawer* id = new ImageDrawer(_originalImg);
    id->setSize(500, 500);
    vp->setViewedComponent(id, true);
    vp->setSize(id->getWidth(), id->getHeight());

    CallOutBox::launchAsynchronously(vp, _showImgButton.getScreenBounds(), nullptr);
  }
}

Image ImageAttribute::getOriginalImage()
{
  return _originalImg;
}

double ImageAttribute::avgLabDistance(Snapshot * s)
{
  Image query = generateImage(s);
  double sum = 0;

  // compute average lab feature difference
  for (int y = 0; y < _canonicalHeight; y++) {
    for (int x = 0; x < _canonicalWidth; x++) {
      auto px = _sourceImg.getPixelAt(x, y);
      Eigen::Vector3d Lab1 = rgbToLab(px.getRed() / 255.0, px.getGreen() / 255.0, px.getBlue() / 255.0);

      auto px2 = query.getPixelAt(x, y);
      Eigen::Vector3d Lab2 = rgbToLab(px2.getRed() / 255.0, px2.getGreen() / 255.0, px2.getBlue() / 255.0);

      sum += (Lab1 - Lab2).norm();
    }
  }

  return sum / (_canonicalWidth * _canonicalHeight);
}

void ImageAttribute::comboBoxChanged(ComboBox * box)
{
  if (_mode != (Mode)(box->getSelectedId() - 1)) {
    _mode = (Mode)(box->getSelectedId() - 1);
    repaint();
  }
}

void ImageAttribute::lockMode()
{
  _modeSelect.setEnabled(false);
}

void ImageAttribute::unlockMode()
{
  _modeSelect.setEnabled(true);
}

void ImageAttribute::setName(string name)
{
  _name = name;
}